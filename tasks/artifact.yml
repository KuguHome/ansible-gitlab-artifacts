- name: Check mandatory variables
  become: false
  fail:
    msg: "Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items:
  - gitlabartifact_api_token
  - gitlabartifact_project_id
- name: Retrieve latest succesful jobs
  become: false
  delegate_to: localhost
  uri:
    url: "{{ gitlabartifact_pipelinejobs_endpoint }}?scope=success"
    return_content: yes
    headers: "{{ gitlabartifact_auth }}"
  register: gitlabartifact_jobslist
- name: determine correct job
  become: false
  vars:
  - job_id_query_filter_ref: "ref=='{{ gitlabartifact_git_reference }}'"
  - job_id_query_filter_name: "name=='{{ gitlabartifact_jobname }}'"
  - job_id_query_filters: "{{ (gitlabartifact_git_reference or gitlabartifact_jobname) | ternary('?', '*') }}{{ gitlabartifact_git_reference | ternary(job_id_query_filter_ref, '') }}{{ (gitlabartifact_git_reference and gitlabartifact_jobname) | ternary(' && ', '') }}{{ gitlabartifact_jobname | ternary(job_id_query_filter_name, '') }}"
  - job_id_query: "[{{ job_id_query_filters }}].id | [0]"
  set_fact:
    __job_id: "{{ gitlabartifact_jobslist.json | json_query(job_id_query) }}"

- name: fail if no job
  fail:
    msg: "No successful job for project_id={{ gitlabartifact_project_id }}, jobname={{ gitlabartifact_jobname }} and git_reference={{ gitlabartifact_git_reference }} found"
  when: not __job_id
- name: Ensure temporary storage exists
  delegate_to: localhost
  become: false
  file:
     path: "{{ gitlabartifact_tempstorage }}"
     state: directory
- name: Download artifact to local temporary storage
  become: false
  delegate_to: localhost
#  changed_when: false
  get_url:
    url: "{{ gitlabartifact_jobs_endpoint }}/{{ __job_id }}/artifacts/{{ gitlabartifact_artifact_completepath }}"
    dest: "{{ gitlabartifact_completepath_local }}"
    headers: "{{ gitlabartifact_auth }}"
    force: "{{ gitlabartifact_forcedownload }}"
  register: gitlabartifact_downloadresult

- name: Store local artifact path to fact
  set_fact:
    gitlabartifact_localfile: "{{ gitlabartifact_localfile | combine( dict( [gitlabartifact_name] | zip([gitlabartifact_completepath_local])) ) }}"

- name: Unpack artifacts archive locally
  when: gitlabartifact_extract and not gitlabartifact_artifact_file
  delegate_to: localhost
  unarchive:
    src: "{{ gitlabartifact_completepath_local }}"
    dest: "{{ gitlabartifact_tempstorage }}/"
    remote_src: yes

- name: Check for the remote destination
  stat:
    path: "{{ gitlabartifact_remote_destination }}"
  register: remote_destination

- name: Ensure remote destination storage exists
  become: false
  file:
     path: "{{ gitlabartifact_remote_destination }}"
     state: directory
  when: remote_destination.stat.exists == false

- name: Deploy artifact to remote destination
  when: gitlabartifact_remote_destination is defined and gitlabartifact_remote_destination | length | int > 0
  copy:
    src: "{{ gitlabartifact_completepath_local }}"
    dest: "{{ gitlabartifact_remote_destination }}"
    mode: "{{ gitlabartifact_remote_fileperms }}"
  notify:
  - restart services

- name: Delete artifact at local temporary storage
  when: gitlabartifact_cleanup_local
  become: false
  delegate_to: localhost
  file:
    path: "{{ gitlabartifact_completepath_local }}"
    state: "absent"
